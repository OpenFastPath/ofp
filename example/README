Open IP Fast Path Examples
===============================================================================


FPM
-------------------------------------------------------------------------------
fpm is a good starting point for application development.
It includes basically everything needed to run an application.


SOCKET
-------------------------------------------------------------------------------
OFP application that demonstrates the use of all socket operations available.

udpecho
-------------------------------------------------------------------------------
udpecho demonstrates usage of event based UDP sockets. Application receives
data as odp packets, not via sockets. Application sends data back using two
optional methods:
1. standard socket interface, or
2. reusing the same packet and sending it using a packet send function.

udp_fwd_sock
------------------------------------------------------------------------------
UDP forwarding application for performance measurement using socket callback.
Application parameters configure the local ip, remote ip and the number of
local sockets opened for forwarding. More information available on the OpenFastPath performance measurement procedures.

webserver
-------------------------------------------------------------------------------
This is a simple web server that uses sockets as expected.

To setup and run the web server:
# setup www_dir (default: /var/www) do:
export www_dir=/path/to/your/www
./scripts/start_webserver.sh <ethX> <IP>

# To stop the web server:
./scripts/start_webserver.sh <ethX>

By default the webserver uses ofp_select to monitor the file descriptors. By
defining CPPFLAGS='-DUSE_EPOLL' when running configure the webserver can be set to
use the ofp epoll implementation, e.g.:

./configure <typical-ofp-flags> CPPFLAGS='-DUSE_EPOLL'
make clean
make

webserver2
-------------------------------------------------------------------------------
This web server receives requests as odp packets and sends responses
using normal sockets. Benefit is that it is not necessary to have
bookkeeping for the sockets. For example accept is executed to create
necessary data structures but the result (new socket) is ignored.
At the moment there is one restriction: reply length is limited to 63
socket writings.


ioctl_test
-------------------------------------------------------------------------------
Examples how to use ioctl to control sockets, interfaces, and routes.


sysctl
-------------------------------------------------------------------------------
Management Information Base (MIB) is a hierarchical database that
describes an application. Object Identifiers (OID) can be used to
read and write variables. Sysctl example demonstrates how to create
new nodes and variables and how to read and write them.

ofp_netwrap_proc
ofp_netwrap_crt
-------------------------------------------------------------------------------
The two libraries exemplifies how to run native Linux application on top of
OFP. Implementation is based on LD_PRELOAD.
ofp_netwrap_proc - implements ODP/OFP configuration and startup of processing
threads
ofp_netwrap_crt - implements symbols overloading (using dlsym()) and arguments
conversion between native calls and OFP calls. Current implementation
overloads the following symbols: socket(), close(), shutdown(), bind(), accept(),
accept4(), listen(), connect(), read(), write(), recv(), send(), getsockopt(),
setsockopt(), writev(), sendfile64(), select(), epoll_create(), epoll_ctl(), epoll_wait(),
ioctl() and fork().

A script is provided in order to make utilization of this feature friendlier.
Script's default configuration (see OFP_NETWRAP_ENV environment variable):
 - Interface eth1 is used and 192.168.100.1 is configured.
 - All cores (except for core 0) are used.
 - CLI file ./scripts/ofp_netwrap.cli is used for additional settings

Execution:
 - Set the path to the shared libraries.
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<Your path>/ofp/lib/.libs
 or
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<OFP install path>/lib

 - Set OFP execution parameters (interfaces, cores, cli file)
# export OFP_NETWRAP_ENV="-i 0 -f <Your path>/ofp/scripts/ofp_netwrap.cli"

 - Run application
# <Your path>/ofp/scripts/ofp_netwrap.sh YOUR_NATIVE_APPLICATION

Restrictions:
 - Application needs to run as super user
 - Slow path support needs to be disabled (use --enable-sp=no in configuration line)
 - Specific socket configuration needs to be activated (use --with-config-flv=netwrap-webserver)
e.g.
./configure --enable-sp=no --with-config-flv=netwrap-webserver
